import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { IStudent, IStudentList } from 'src/models/students.model';
import { RootState, AppThunk } from '~store/index';
import { studentsService } from 'src/services/features';

const initialState: IStudentList = {
    list: [],
};

interface IPagination {
    page: number;
    limit: number;
}

export const getListStudentsAsync = createAsyncThunk('students/getLists', async ({ page, limit }: IPagination) => {
    const response = await studentsService.getAll({
        url: `?page=${page}&limit=${limit}`,
    });
    return response.data;
});

export const studentsSlice = createSlice({
    name: 'students',
    initialState,
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder.addCase(getListStudentsAsync.fulfilled, (state, action) => {
            state.list = action.payload;
        });
    },
});
export const listStudents = (state: RootState) => state.students.list;
export default studentsSlice.reducer;
